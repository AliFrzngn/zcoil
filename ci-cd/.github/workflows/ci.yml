name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
    
    - name: Install Frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint Python code
      run: |
        flake8 backend/
        black --check backend/
        isort --check-only backend/
        mypy backend/
    
    - name: Lint Frontend code
      run: |
        cd frontend
        npm run lint
        npm run type-check
        npm run format:check
    
    - name: Run Python tests
      run: |
        pytest backend/ --cov=backend --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
    
    - name: Run Frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Run security scan
      run: |
        pip install safety
        safety check
    
    - name: Run Frontend security audit
      run: |
        cd frontend
        npm audit --audit-level moderate

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push images
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/inventory-service:latest ./backend/inventory-service
        docker build -t ${{ secrets.DOCKER_USERNAME }}/crm-service:latest ./backend/crm-service
        docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:latest ./backend/user-service
        docker build -t ${{ secrets.DOCKER_USERNAME }}/notification-service:latest ./backend/notification-service
        docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend
        
        docker push ${{ secrets.DOCKER_USERNAME }}/inventory-service:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/crm-service:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/notification-service:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest
