version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: alifrzngn-postgres
    environment:
      POSTGRES_DB: ali_frzngn_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: alifrzngn-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build:
      context: .
      dockerfile: backend/user-service/Dockerfile
    container_name: alifrzngn-user-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ali_frzngn_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - SERVICE_NAME=user-service
      - ENVIRONMENT=development
      - DEBUG=true
      - FRONTEND_URL=http://localhost:3000
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=10485760
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - user_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Inventory Service
  inventory-service:
    build:
      context: .
      dockerfile: backend/inventory-service/Dockerfile
    container_name: alifrzngn-inventory-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ali_frzngn_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - SERVICE_NAME=inventory-service
      - ENVIRONMENT=development
      - DEBUG=true
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CRM Service
  crm-service:
    build:
      context: .
      dockerfile: backend/crm-service/Dockerfile
    container_name: alifrzngn-crm-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ali_frzngn_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - INVENTORY_SERVICE_URL=http://inventory-service:8001
      - SERVICE_NAME=crm-service
      - ENVIRONMENT=development
      - DEBUG=true
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: alifrzngn-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:80
      - NODE_ENV=development
    ports:
      - "3000:3000"
    depends_on:
      - nginx
    volumes:
      - ./frontend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx API Gateway
  nginx:
    image: nginx:alpine
    container_name: alifrzngn-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - user-service
      - inventory-service
      - crm-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Migration Service
  migrate:
    build:
      context: .
      dockerfile: backend/shared/database/Dockerfile
    container_name: alifrzngn-migrate
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ali_frzngn_dev
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
    command: ["python", "backend/shared/database/migrate.py", "upgrade"]
    restart: "no"

volumes:
  postgres_data:
  redis_data:
  user_uploads:

networks:
  default:
    name: alifrzngn-network