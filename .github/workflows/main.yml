name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
    
    - name: Install Frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint Python code
      run: |
        flake8 backend/
        black --check backend/
        isort --check-only backend/
        mypy backend/
    
    - name: Lint Frontend code
      run: |
        cd frontend
        npm run lint
        npm run type-check
        npm run format:check
    
    - name: Run Python tests
      run: |
        pytest backend/ --cov=backend --cov-report=xml --cov-report=html --junitxml=test-results.xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key
        ENVIRONMENT: test
    
    - name: Run Frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --ci
    
    - name: Upload Python coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage
    
    - name: Upload Frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test-results.xml

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        pip install safety bandit
        cd frontend && npm ci
    
    - name: Run Python security scan
      run: |
        safety check --json --output safety-report.json
        bandit -r backend/ -f json -o bandit-report.json
    
    - name: Run Frontend security audit
      run: |
        cd frontend
        npm audit --audit-level moderate --json > ../npm-audit-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          npm-audit-report.json

  # Build and push Docker images
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [inventory-service, crm-service, user-service, notification-service, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: |
          backend/${{ matrix.service }}/Dockerfile
          frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
    
    - name: Deploy to staging
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/inventory-service:develop|g" k8s/deployments/inventory-service.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/crm-service:develop|g" k8s/deployments/crm-service.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:develop|g" k8s/deployments/user-service.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service:develop|g" k8s/deployments/notification-service.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:develop|g" k8s/deployments/frontend.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/
    
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/inventory-service -n microservices
        kubectl rollout status deployment/crm-service -n microservices
        kubectl rollout status deployment/user-service -n microservices
        kubectl rollout status deployment/notification-service -n microservices
        kubectl rollout status deployment/frontend -n microservices
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Test health endpoints
        curl -f http://staging.example.com/health || exit 1
        curl -f http://staging.example.com/api/v1/inventory/health || exit 1
        curl -f http://staging.example.com/api/v1/crm/health || exit 1
        curl -f http://staging.example.com/api/v1/users/health || exit 1
        curl -f http://staging.example.com/api/v1/notifications/health || exit 1

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
    
    - name: Deploy to production
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/inventory-service:latest|g" k8s/deployments/inventory-service.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/crm-service:latest|g" k8s/deployments/crm-service.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:latest|g" k8s/deployments/user-service.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service:latest|g" k8s/deployments/notification-service.yaml
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest|g" k8s/deployments/frontend.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/
    
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/inventory-service -n microservices
        kubectl rollout status deployment/crm-service -n microservices
        kubectl rollout status deployment/user-service -n microservices
        kubectl rollout status deployment/notification-service -n microservices
        kubectl rollout status deployment/frontend -n microservices
    
    - name: Run production smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Test health endpoints
        curl -f https://api.example.com/health || exit 1
        curl -f https://api.example.com/api/v1/inventory/health || exit 1
        curl -f https://api.example.com/api/v1/crm/health || exit 1
        curl -f https://api.example.com/api/v1/users/health || exit 1
        curl -f https://api.example.com/api/v1/notifications/health || exit 1

  # Performance testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install performance testing tools
      run: |
        pip install locust
    
    - name: Run performance tests
      run: |
        # Create a simple performance test
        cat > performance_test.py << 'EOF'
        from locust import HttpUser, task, between
        
        class MicroservicesUser(HttpUser):
            wait_time = between(1, 3)
            
            @task(3)
            def health_check(self):
                self.client.get("/health")
            
            @task(2)
            def inventory_api(self):
                self.client.get("/api/v1/inventory/")
            
            @task(2)
            def crm_api(self):
                self.client.get("/api/v1/crm/")
            
            @task(1)
            def user_api(self):
                self.client.get("/api/v1/users/")
        EOF
        
        # Run performance test
        locust -f performance_test.py --host=http://staging.example.com --users=10 --spawn-rate=2 --run-time=60s --headless

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleaning up old container images..."
        # This would typically clean up old images from the registry
        # Implementation depends on your container registry
