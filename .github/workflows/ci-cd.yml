name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety semgrep
          pip install -r requirements.txt

      - name: Run Bandit security scan
        run: |
          bandit -r backend/ -f json -o bandit-report.json || true
          bandit -r backend/ -f txt

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto backend/ --json --output=semgrep-report.json || true
          semgrep --config=auto backend/

  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install black isort flake8 mypy
          pip install -r requirements.txt

      - name: Run Black formatter
        run: black --check backend/

      - name: Run isort
        run: isort --check-only backend/

      - name: Run Flake8
        run: flake8 backend/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run MyPy type checking
        run: mypy backend/ --ignore-missing-imports

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run unit tests
        run: |
          pytest backend/ -v --cov=backend --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-format, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d postgres redis
          sleep 30

      - name: Run integration tests
        run: |
          pytest backend/tests/integration/ -v

      - name: Stop services
        run: |
          docker-compose down

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-format, test, integration-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push user-service
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/alifrzngn-user-service:${{ github.sha }} -f backend/user-service/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/alifrzngn-user-service:${{ github.sha }}

      - name: Build and push inventory-service
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/alifrzngn-inventory-service:${{ github.sha }} -f backend/inventory-service/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/alifrzngn-inventory-service:${{ github.sha }}

      - name: Build and push crm-service
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/alifrzngn-crm-service:${{ github.sha }} -f backend/crm-service/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/alifrzngn-crm-service:${{ github.sha }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here
          # This could be Kubernetes, Docker Swarm, or any other orchestration platform
